#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define RED     "\033[1;31m"
#define GREEN   "\033[1;32m"
#define YELLOW  "\033[1;33m"
#define BLUE    "\033[1;34m"
#define MAGENTA "\033[1;35m"
#define CYAN    "\033[1;36m"
#define RESET   "\033[0m"

char tname[50];
int tpass;
int login=0;

void createaccount(){
    FILE *fp=fopen("blended.txt", "w");
    if(fp==NULL)
        {
        printf(RED"File error!\n"RESET);
        return;
    }

    printf(CYAN"Create account:\n"RESET);
    printf("Enter name: ");
    scanf("%s",tname);
    printf("Enter 8-digit password (only numbers): ");
    scanf("%d",&tpass);

       if(tpass==00000000 )
        {
        printf(RED"Weak password.\n"RESET);
        fclose(fp);
        createaccount();
    }



 else if(tpass<10000000||tpass>99999999)
        {
        printf(RED"Invalid password!It must be 8-digit number.\n"RESET);
        fclose(fp);
        createaccount();
    }
    else
    {
        fprintf(fp,"%s %d\n",tname,tpass);
        fclose(fp);
        printf(GREEN"Account created successfully!\n"RESET);
        login=1;
    }
}

void loginaccount(){
    char name[50];
    int pass;
    FILE *fp=fopen("blended.txt", "r");
    if(fp==NULL)
    {
        printf(RED"No account found. Please create an account first.\n"RESET);
        return;
    }

    fscanf(fp,"%s %d",tname,&tpass);
    fclose(fp);

    while(1)  
    {
        printf(MAGENTA"Login:\n"RESET);
        printf("Enter name: ");
        scanf("%s",name);
        printf("Enter password: ");
        scanf("%d",&pass);

        if(strcmp(name,tname)==0&&pass==tpass)
        {
            printf(GREEN"Login successful!\n"RESET);
            login=1;
            break;
        }
        else
        {
            printf(RED"Incorrect name or password. Try again.\n"RESET);
        }
    }
}

void auth(){
    int choice;
    while(!login)
        {
        printf(BLUE"\n--- Teacher Portal ---\n"RESET);
        printf("1.Create Account\n");
        printf("2.Login(Already have an account)\n");
        printf("Enter choice: ");
        scanf("%d",&choice);

        if(choice==1)
            {
            createaccount();
        }
        else if(choice == 2)
            {
            loginaccount();
        }
        else
        {
            printf(RED"Invalid choice!\n"RESET);
        }
    }
}

struct std{
    char name[50];
    int age;
    int cls;
    float ssc_gpa;
    float hsc_gpa;
    int roll;
    struct std *next;
};

struct std *head=NULL;

void addstd(){
    struct std *newstd=(struct std *)malloc(sizeof(struct std));
    printf("Enter student name: ");
    scanf("%s",newstd->name);
    printf("Enter age: ");
    scanf("%d",&newstd->age);
    printf("Enter class: ");
    scanf("%d",&newstd->cls);
    printf("Enter SSC GPA (out of 5.00): ");
    scanf("%f",&newstd->ssc_gpa);
    printf("Enter HSC GPA (out of 5.00): ");
    scanf("%f",&newstd->hsc_gpa);

    if(newstd->ssc_gpa<0.00||newstd->ssc_gpa>5.00)
        newstd->ssc_gpa=0.00;
    if(newstd->hsc_gpa<0.00||newstd->hsc_gpa>5.00)
        newstd->hsc_gpa=0.00;

    newstd->next=NULL;
    float total_gpa=newstd->ssc_gpa+newstd->hsc_gpa;

    if(head==NULL||(head->ssc_gpa+head->hsc_gpa)<total_gpa)
        {
        newstd->next=head;
        head=newstd;
    }
    else
        {
        struct std *temp=head;
        while(temp->next!=NULL&&(temp->next->ssc_gpa+temp->next->hsc_gpa)>=total_gpa)
        {
            temp=temp->next;
        }
        newstd->next=temp->next;
        temp->next=newstd;
    }

    struct std *temp=head;
    int roll=1;
    while(temp!=NULL)
        {
        temp->roll=roll++;
        temp=temp->next;
    }

    printf(GREEN"Student added successfully!\n"RESET);
}

void displaystds(){
    struct std *temp=head;
    if(temp==NULL)
        {
        printf(RED"No students enrolled.\n"RESET);
        return;
    }
    printf(CYAN"\n--- Student List ---\n"RESET);
    while(temp!=NULL)
     {
        printf(YELLOW"Roll: %d\nName: %s\nAge: %d\nClass: %d\nSSC GPA: %.2f\nHSC GPA: %.2f\nTotal GPA: %.2f\n\n" RESET,
               temp->roll,temp->name,temp->age,temp->cls,temp->ssc_gpa,temp->hsc_gpa,
               (temp->ssc_gpa+temp->hsc_gpa));
        temp=temp->next;
    }
}

void deletestd(){
    char name[50];
    printf("Enter student name to delete: ");
    scanf("%s",name);
    struct std *temp=head,*prev=NULL;
    while(temp!=NULL&&strcmp(temp->name,name)!=0)
        {
        prev=temp;
        temp=temp->next;
    }
    if(temp==NULL)
      {
        printf(RED"Student not found!\n"RESET);
        return;
    }
    if(prev==NULL)
        head=temp->next;
    else
        prev->next=temp->next;
    free(temp);

    int roll=1;
    struct std *temp2=head;
    while(temp2!=NULL)
        {
        temp2->roll=roll++;
        temp2=temp2->next;
    }

    printf(GREEN"Student deleted successfully!\n"RESET);
}

void searchstd(){
    char name[50];
    printf("Enter student name to search: ");
    scanf("%s",name);
    struct std *temp=head;
    while(temp!=NULL) {
        if(strcmp(temp->name,name)==0)
            {
            printf(CYAN"Student found - Roll: %d\nName: %s\nAge: %d\nClass: %d\nSSC GPA: %.2f\nHSC GPA: %.2f\nTotal GPA: %.2f\n" RESET,
                   temp->roll,temp->name,temp->age,temp->cls,temp->ssc_gpa,temp->hsc_gpa,
                   (temp->ssc_gpa+temp->hsc_gpa));
            return;
        }
        temp=temp->next;
    }
    printf(RED"Student not found!\n"RESET);
}

#define max 100
char queue[max][50];
int front=-1,rear=-1;

void markattendance(){
    int roll;
    printf("Enter roll for attendance: ");
    scanf("%d",&roll);
    struct std *temp=head;
    while(temp!=NULL&&temp->roll!=roll)
        temp=temp->next;
    if(temp==NULL)
        {
        printf(RED"Invalid ID\n"RESET);
        return;
    }
    if(rear==max-1)
    {
        printf(RED"Queue full\n"RESET);
        return;
    }
    if(front==-1)
        front=0;
    strcpy(queue[++rear],temp->name);
    printf(GREEN"Attendance marked for %s (Roll: %d)\n"RESET,temp->name,roll);
}

void showattendance(){
    if(front==-1||front>rear)
        {
        printf(RED"No attendance marked.\n"RESET);
        return;
    }
    printf(MAGENTA"--- Attendance List ---\n"RESET);
    for(int i=front;i<=rear;i++)
    {
        printf("%s\n",queue[i]);
    }
}

char stack[max][50];
int top=-1;

void submitassignment()
 {
    int roll;
    char subject[50];
    printf("Enter student roll number for assignment submission: ");
    scanf("%d",&roll);
    struct std *temp=head;
    while(temp!=NULL&&temp->roll!=roll)
        temp=temp->next;
    if(temp==NULL)
        {
        printf(RED"Invalid ID\n"RESET);
        return;
    }

    printf("Enter subject name: ");
    scanf("%s",subject);

    if(top==max-1)
        {
        printf(RED"Assignment stack full\n"RESET);
        return;
    }

    char entry[100];
    snprintf(entry,sizeof(entry),"%s-%s",temp->name,subject);
    strcpy(stack[++top],entry);
    printf(GREEN"Assignment submitted by %s (Roll: %d) for %s\n"RESET, temp->name, roll, subject);
}

void showsubmissions()
 {
    if(top==-1)
        {
        printf(RED"No assignments submitted.\n"RESET);
        return;
    }
    printf(CYAN"--- Assignment Submission Stack ---\n"RESET);
    for(int i=top;i>=0;i--)
     {
        printf("%s\n",stack[i]);
    }
}

struct coursenode{
    char course[50];
    struct coursenode *left,*right;
};

struct coursenode *insertcourse(struct coursenode *root,char *sub){
    if(root==NULL)
        {
        struct coursenode *newnode=(struct coursenode *)malloc(sizeof(struct coursenode));
        strcpy(newnode->course,sub);
        newnode->left=newnode->right=NULL;
        return newnode;
    }
    if(strcmp(sub,root->course)<0)
        root->left=insertcourse(root->left,sub);
    else
        root->right=insertcourse(root->right,sub);
    return root;
}

void inordercourses(struct coursenode *root){
    if(root)
        {
        inordercourses(root->left);
        printf("%s\n",root->course);
        inordercourses(root->right);
    }
}

int main(){
    printf(BLUE "                     Daffodil International Univeristy - Blended Portal\n" RESET);
    printf(BLUE "                     House: #11, Road #14, Dhanmondi, Dhaka-1209\n" RESET);
    auth();
    struct coursenode *courseroot=NULL;

    int choice;
    while(1){
        printf(BLUE "\n                     Daffodil International University - Blended Portal\n" RESET);
        printf(BLUE "                     House: #11, Road #14, Dhanmondi, Dhaka-1209\n" RESET);
        printf(YELLOW "1.Add Student\n2. Display Students\n3. Delete Student\n4. Search Student\n" RESET);
        printf(YELLOW "5.Mark Attendance\n6. Show Attendance\n" RESET);
        printf(YELLOW "7.Submit Assignment\n8. Show Submissions\n" RESET);
        printf(YELLOW "9.Add Course\n10. Show Courses\n11. Exit\n" RESET);
        printf("Enter your choice: ");
        scanf("%d",&choice);

        switch(choice){
            case 1:addstd();break;
            case 2:displaystds();break;
            case 3:deletestd();break;
            case 4:searchstd();break;
            case 5:markattendance();break;
            case 6:showattendance();break;
            case 7:submitassignment();break;
            case 8:showsubmissions();break;
            case 9:{
                char sub[50];
                printf("Enter course name: ");
                scanf("%s",sub);
                courseroot=insertcourse(courseroot,sub);
                break;
            }
            case 10:
                printf(CYAN"--- Course List ---\n"RESET);
                inordercourses(courseroot);
                break;
            case 11:exit(0);
            default:printf(RED"Invalid choice!\n"RESET);
        }
    }
    return 0;
}
